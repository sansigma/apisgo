// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssigmaapi/type/trade.proto

package trade

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Trades struct {
	Trades               []*Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trades) Reset()         { *m = Trades{} }
func (m *Trades) String() string { return proto.CompactTextString(m) }
func (*Trades) ProtoMessage()    {}
func (*Trades) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fa08eeb4bd73df2, []int{0}
}

func (m *Trades) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trades.Unmarshal(m, b)
}
func (m *Trades) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trades.Marshal(b, m, deterministic)
}
func (m *Trades) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trades.Merge(m, src)
}
func (m *Trades) XXX_Size() int {
	return xxx_messageInfo_Trades.Size(m)
}
func (m *Trades) XXX_DiscardUnknown() {
	xxx_messageInfo_Trades.DiscardUnknown(m)
}

var xxx_messageInfo_Trades proto.InternalMessageInfo

func (m *Trades) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type Trade struct {
	Symbol               string   `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TradeId              string   `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	Exchange             string   `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Base                 string   `protobuf:"bytes,4,opt,name=base,proto3" json:"base,omitempty"`
	Quote                string   `protobuf:"bytes,5,opt,name=quote,proto3" json:"quote,omitempty"`
	Price                float64  `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Amount               float64  `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Timestamp            int64    `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Side                 string   `protobuf:"bytes,9,opt,name=side,proto3" json:"side,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fa08eeb4bd73df2, []int{1}
}

func (m *Trade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trade.Unmarshal(m, b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
}
func (m *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(m, src)
}
func (m *Trade) XXX_Size() int {
	return xxx_messageInfo_Trade.Size(m)
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Trade) GetTradeId() string {
	if m != nil {
		return m.TradeId
	}
	return ""
}

func (m *Trade) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Trade) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *Trade) GetQuote() string {
	if m != nil {
		return m.Quote
	}
	return ""
}

func (m *Trade) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trade) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Trade) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Trade) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func init() {
	proto.RegisterType((*Trades)(nil), "ssigmaapi.type.Trades")
	proto.RegisterType((*Trade)(nil), "ssigmaapi.type.Trade")
}

func init() { proto.RegisterFile("ssigmaapi/type/trade.proto", fileDescriptor_8fa08eeb4bd73df2) }

var fileDescriptor_8fa08eeb4bd73df2 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4f, 0x84, 0x30,
	0x14, 0xc6, 0x53, 0x39, 0x38, 0x78, 0x26, 0x0e, 0x8d, 0x9a, 0xe7, 0xc5, 0x81, 0xdc, 0xc4, 0x22,
	0x98, 0x73, 0x70, 0x70, 0x73, 0x73, 0x25, 0x4e, 0x2e, 0xa6, 0x40, 0xc3, 0x35, 0xb1, 0xb4, 0xd2,
	0x92, 0x78, 0xff, 0xad, 0x7f, 0x8a, 0xe9, 0x83, 0xa0, 0x2e, 0xa4, 0xbf, 0xdf, 0xf7, 0x25, 0x8f,
	0x7c, 0xb0, 0x73, 0x4e, 0xf5, 0x5a, 0x08, 0xab, 0x2a, 0x7f, 0xb2, 0xb2, 0xf2, 0xa3, 0xe8, 0x64,
	0x69, 0x47, 0xe3, 0x0d, 0xbf, 0x58, 0xb3, 0x32, 0x64, 0xfb, 0x47, 0x48, 0x5e, 0x43, 0xec, 0xf8,
	0x1d, 0x24, 0x54, 0x74, 0xc8, 0xf2, 0xa8, 0x38, 0x3f, 0x5c, 0x95, 0xff, 0xab, 0x25, 0xf5, 0xea,
	0xa5, 0xb4, 0xff, 0x66, 0x10, 0x93, 0xe1, 0xd7, 0x90, 0xb8, 0x93, 0x6e, 0xcc, 0x07, 0xb2, 0x9c,
	0x15, 0x59, 0xbd, 0x10, 0xbf, 0x81, 0x94, 0xba, 0xef, 0xaa, 0xc3, 0x33, 0x4a, 0xb6, 0xc4, 0x2f,
	0x1d, 0xdf, 0x41, 0x2a, 0xbf, 0xda, 0xa3, 0x18, 0x7a, 0x89, 0x11, 0x45, 0x2b, 0x73, 0x0e, 0x9b,
	0x46, 0x38, 0x89, 0x1b, 0xf2, 0xf4, 0xe6, 0x97, 0x10, 0x7f, 0x4e, 0xc6, 0x4b, 0x8c, 0x49, 0xce,
	0x10, 0xac, 0x1d, 0x55, 0x2b, 0x31, 0xc9, 0x59, 0xc1, 0xea, 0x19, 0xc2, 0xef, 0x08, 0x6d, 0xa6,
	0xc1, 0xe3, 0x96, 0xf4, 0x42, 0xfc, 0x16, 0x32, 0xaf, 0xb4, 0x74, 0x5e, 0x68, 0x8b, 0x69, 0xce,
	0x8a, 0xa8, 0xfe, 0x15, 0xe1, 0xaa, 0x53, 0x9d, 0xc4, 0x6c, 0xbe, 0x1a, 0xde, 0xcf, 0x87, 0xb7,
	0xfb, 0x5e, 0xf9, 0xe3, 0xd4, 0x94, 0xad, 0xd1, 0x95, 0x13, 0x03, 0xed, 0x51, 0xad, 0xb3, 0xf4,
	0xe6, 0xcf, 0xbe, 0x4f, 0xf4, 0x6d, 0x12, 0x9a, 0xf9, 0xe1, 0x27, 0x00, 0x00, 0xff, 0xff, 0x98,
	0x48, 0xa1, 0x01, 0x84, 0x01, 0x00, 0x00,
}
